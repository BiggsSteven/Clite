Begin parsing... programs/array.cpp

Program (abstract syntax): 
  Declarations: 
    Declarations = {<num[2], char>, <temp, char>}
  Block: 
    Assignment: 
      ArrayRef: num[0]
      CharValue: 2
    Assignment: 
      ArrayRef: num[1]
      CharValue: 1
    Conditional: 
      Binary: 
        Operator: >
        ArrayRef: num[0]
        ArrayRef: num[1]
      Block: 
        Assignment: 
          Variable: temp
          ArrayRef: num[1]
        Assignment: 
          ArrayRef: num[1]
          ArrayRef: num[0]
        Assignment: 
          ArrayRef: num[0]
          Variable: temp
      Skip: 

Begin type checking...

Type map:
{ <temp, char>, <num[2], char> }

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Declarations: 
    Declarations = {<num[2], char>, <temp, char>}
  Block: 
    Assignment: 
      ArrayRef: num[0]
      CharValue: 2
    Assignment: 
      ArrayRef: num[1]
      CharValue: 1
    Conditional: 
      Binary: 
        Operator: CHAR>
        ArrayRef: num[0]
        ArrayRef: num[1]
      Block: 
        Assignment: 
          Variable: temp
          ArrayRef: num[1]
        Assignment: 
          ArrayRef: num[1]
          ArrayRef: num[0]
        Assignment: 
          ArrayRef: num[0]
          Variable: temp
      Skip: 

Begin interpreting... programs/array.cpp

Final State

Environment:

    VariableRef  MemoryAddr  MemoryValue(from Memory)
    temp         9           1
    num[2]       0           DopeVector{addr[0]=512, size=2, type=char}

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           num[2]            char     DopeVector{addr[0]=512, size=2, type=char}
    9           temp              char     1

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    512         num[0]            char     1
    513         num[1]            char     2
