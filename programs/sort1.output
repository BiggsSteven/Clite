Begin parsing... programs/sort1.cpp

Program (abstract syntax): 
  Globals:
  Declarations: 
    {}
  Functions: 
    Function = main; Return type = int
      params = 
      Declarations: 
        {}
      locals = 
      Declarations: 
        {<orig[5], int>, <count[5], int>, <sorted[5], int>, <n, int>, <i, int>, <j, int>}
      Block: 
        Assignment: 
          Variable: n
          IntValue: 5
        Assignment: 
          ArrayRef: orig[0]
          IntValue: 2
        Assignment: 
          ArrayRef: orig[1]
          IntValue: 9
        Assignment: 
          ArrayRef: orig[2]
          IntValue: 5
        Assignment: 
          ArrayRef: orig[3]
          IntValue: 0
        Assignment: 
          ArrayRef: orig[4]
          IntValue: 6
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: <
            Variable: i
            Variable: n
          Block: 
            Assignment: 
              ArrayRef: count[i]
              IntValue: 0
            Assignment: 
              Variable: i
              Binary: 
                Operator: +
                Variable: i
                IntValue: 1
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: <
            Variable: i
            Binary: 
              Operator: -
              Variable: n
              IntValue: 1
          Block: 
            Assignment: 
              Variable: j
              Binary: 
                Operator: +
                Variable: i
                IntValue: 1
            Loop: 
              Binary: 
                Operator: <
                Variable: j
                Variable: n
              Block: 
                Conditional: 
                  Binary: 
                    Operator: <
                    ArrayRef: orig[i]
                    ArrayRef: orig[j]
                  Block: 
                    Assignment: 
                      ArrayRef: count[j]
                      Binary: 
                        Operator: +
                        ArrayRef: count[j]
                        IntValue: 1
                  Block: 
                    Assignment: 
                      ArrayRef: count[i]
                      Binary: 
                        Operator: +
                        ArrayRef: count[i]
                        IntValue: 1
                Assignment: 
                  Variable: j
                  Binary: 
                    Operator: +
                    Variable: j
                    IntValue: 1
            Assignment: 
              Variable: i
              Binary: 
                Operator: +
                Variable: i
                IntValue: 1
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: <
            Variable: i
            Variable: n
          Block: 
            Assignment: 
              ArrayRef: sorted[count[i]]
              ArrayRef: orig[i]
            Assignment: 
              Variable: i
              Binary: 
                Operator: +
                Variable: i
                IntValue: 1


Begin type checking...

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Globals:
  Declarations: 
    {}
  Functions: 
    Function = main; Return type = int
      params = 
      Declarations: 
        {}
      locals = 
      Declarations: 
        {<orig[5], int>, <count[5], int>, <sorted[5], int>, <n, int>, <i, int>, <j, int>}
      Block: 
        Assignment: 
          Variable: n
          IntValue: 5
        Assignment: 
          ArrayRef: orig[0]
          IntValue: 2
        Assignment: 
          ArrayRef: orig[1]
          IntValue: 9
        Assignment: 
          ArrayRef: orig[2]
          IntValue: 5
        Assignment: 
          ArrayRef: orig[3]
          IntValue: 0
        Assignment: 
          ArrayRef: orig[4]
          IntValue: 6
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: INT<
            Variable: i
            Variable: n
          Block: 
            Assignment: 
              ArrayRef: count[i]
              IntValue: 0
            Assignment: 
              Variable: i
              Binary: 
                Operator: INT+
                Variable: i
                IntValue: 1
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: INT<
            Variable: i
            Binary: 
              Operator: INT-
              Variable: n
              IntValue: 1
          Block: 
            Assignment: 
              Variable: j
              Binary: 
                Operator: INT+
                Variable: i
                IntValue: 1
            Loop: 
              Binary: 
                Operator: INT<
                Variable: j
                Variable: n
              Block: 
                Conditional: 
                  Binary: 
                    Operator: INT<
                    ArrayRef: orig[i]
                    ArrayRef: orig[j]
                  Block: 
                    Assignment: 
                      ArrayRef: count[j]
                      Binary: 
                        Operator: INT+
                        ArrayRef: count[j]
                        IntValue: 1
                  Block: 
                    Assignment: 
                      ArrayRef: count[i]
                      Binary: 
                        Operator: INT+
                        ArrayRef: count[i]
                        IntValue: 1
                Assignment: 
                  Variable: j
                  Binary: 
                    Operator: INT+
                    Variable: j
                    IntValue: 1
            Assignment: 
              Variable: i
              Binary: 
                Operator: INT+
                Variable: i
                IntValue: 1
        Assignment: 
          Variable: i
          IntValue: 0
        Loop: 
          Binary: 
            Operator: INT<
            Variable: i
            Variable: n
          Block: 
            Assignment: 
              ArrayRef: sorted[count[i]]
              ArrayRef: orig[i]
            Assignment: 
              Variable: i
              Binary: 
                Operator: INT+
                Variable: i
                IntValue: 1


Globals = { 
}

Function main = { 
  <sorted[5], int>, 
  <orig[5], int>, 
  <count[5], int>, 
  <i, int>, 
  <main(), int>, 
  <j, int>, 
  <n, int>
}

No type errors


Begin interpreting... programs/sort1.cpp


Allocated stack frame for function "main":
------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           orig[5]           int      DopeVector{addr[0]=512, size=20, type=int}
    12          count[5]          int      DopeVector{addr[0]=532, size=20, type=int}
    24          sorted[5]         int      DopeVector{addr[0]=552, size=20, type=int}
    36          n                 int      undef
    40          i                 int      undef
    44          j                 int      undef

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    512         orig[0]           int      undef
    516         orig[4]           int      undef
    520         orig[8]           int      undef
    524         orig[12]          int      undef
    528         orig[16]          int      undef
    532         count[0]          int      undef
    536         count[4]          int      undef
    540         count[8]          int      undef
    544         count[12]         int      undef
    548         count[16]         int      undef
    552         sorted[0]         int      undef
    556         sorted[4]         int      undef
    560         sorted[8]         int      undef
    564         sorted[12]        int      undef
    568         sorted[16]        int      undef


Interpreting the meaning of function "main":
--------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           orig[5]           int      DopeVector{addr[0]=512, size=20, type=int}
    12          count[5]          int      DopeVector{addr[0]=532, size=20, type=int}
    24          sorted[5]         int      DopeVector{addr[0]=552, size=20, type=int}
    36          n                 int      5
    40          i                 int      5
    44          j                 int      5

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    512         orig[0]           int      2
    516         orig[4]           int      9
    520         orig[8]           int      5
    524         orig[12]          int      0
    528         orig[16]          int      6
    532         count[0]          int      1
    536         count[4]          int      4
    540         count[8]          int      2
    544         count[12]         int      0
    548         count[16]         int      3
    552         sorted[0]         int      0
    556         sorted[4]         int      2
    560         sorted[8]         int      5
    564         sorted[12]        int      6
    568         sorted[16]        int      9


Deallocated stack frame for function "main":
--------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
