Begin parsing... programs/fibonacci.cpp

Program (abstract syntax): 
  Globals:
  Declarations: 
    {}
  Functions: 
    Function = fibonacci; Return type = int
      params = 
      Declarations: 
        {<n, int>}
      locals = 
      Declarations: 
        {<fib0, int>, <fib1, int>, <temp, int>, <k, int>}
      Block: 
        Assignment: 
          Variable: fib0
          IntValue: 0
        Assignment: 
          Variable: fib1
          IntValue: 1
        Assignment: 
          Variable: k
          Variable: n
        Loop: 
          Binary: 
            Operator: >
            Variable: k
            IntValue: 0
          Block: 
            Assignment: 
              Variable: temp
              Variable: fib0
            Assignment: 
              Variable: fib0
              Variable: fib1
            Assignment: 
              Variable: fib1
              Binary: 
                Operator: +
                Variable: fib0
                Variable: temp
            Assignment: 
              Variable: k
              Binary: 
                Operator: -
                Variable: k
                IntValue: 1
        Return: 
          Variable: fibonacci
          Variable: fib0

    Function = main; Return type = int
      params = 
      Declarations: 
        {}
      locals = 
      Declarations: 
        {<answer, int>}
      Block: 
        Assignment: 
          Variable: answer
          Call: fibonacci
            args = 
              IntValue: 8


Begin type checking...

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Globals:
  Declarations: 
    {}
  Functions: 
    Function = fibonacci; Return type = int
      params = 
      Declarations: 
        {<n, int>}
      locals = 
      Declarations: 
        {<fib0, int>, <fib1, int>, <temp, int>, <k, int>}
      Block: 
        Assignment: 
          Variable: fib0
          IntValue: 0
        Assignment: 
          Variable: fib1
          IntValue: 1
        Assignment: 
          Variable: k
          Variable: n
        Loop: 
          Binary: 
            Operator: INT>
            Variable: k
            IntValue: 0
          Block: 
            Assignment: 
              Variable: temp
              Variable: fib0
            Assignment: 
              Variable: fib0
              Variable: fib1
            Assignment: 
              Variable: fib1
              Binary: 
                Operator: INT+
                Variable: fib0
                Variable: temp
            Assignment: 
              Variable: k
              Binary: 
                Operator: INT-
                Variable: k
                IntValue: 1
        Return: 
          Variable: fibonacci
          Variable: fib0

    Function = main; Return type = int
      params = 
      Declarations: 
        {}
      locals = 
      Declarations: 
        {<answer, int>}
      Block: 
        Assignment: 
          Variable: answer
          Call: fibonacci
            args = 
              IntValue: 8


Globals = { 
}

Function fibonacci = { 
  <fibonacci(<n, int>), int>, 
  <temp, int>, 
  <main(), int>, 
  <k, int>, 
  <fib1, int>, 
  <n, int>, 
  <fib0, int>
}

Function main = { 
  <fibonacci(<n, int>), int>, 
  <answer, int>, 
  <main(), int>
}

No type errors


Begin interpreting... programs/fibonacci.cpp


Allocated stack frame for function "main":
------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           answer            int      undef

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue


Allocated stack frame for function "fibonacci":
-----------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           answer            int      undef
    4           n                 int      8
    8           fib0              int      undef
    12          fib1              int      undef
    16          temp              int      undef
    20          k                 int      undef
    24          fibonacci         int      undef

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue


Interpreting the meaning of function "fibonacci":
-------------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           answer            int      undef
    4           n                 int      8
    8           fib0              int      21
    12          fib1              int      34
    16          temp              int      13
    20          k                 int      0
    24          fibonacci         int      21

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue


Deallocated stack frame for function "fibonacci":
-------------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           answer            int      undef

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue


Interpreting the meaning of function "main":
--------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           answer            int      21

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue


Deallocated stack frame for function "main":
--------------------------------------------

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
