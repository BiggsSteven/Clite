Begin parsing... programs/sortchar.cpp

Program (abstract syntax): 
  Declarations: 
    Declarations = {<orig[5], char>, <sorted[5], char>, <count[5], int>, <n, int>, <i, int>, <j, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 5
    Assignment: 
      ArrayRef: orig[0]
      CharValue: 2
    Assignment: 
      ArrayRef: orig[1]
      CharValue: 9
    Assignment: 
      ArrayRef: orig[2]
      CharValue: 5
    Assignment: 
      ArrayRef: orig[3]
      CharValue: 0
    Assignment: 
      ArrayRef: orig[4]
      CharValue: 6
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          ArrayRef: count[i]
          IntValue: 0
        Assignment: 
          Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Binary: 
          Operator: -
          Variable: n
          IntValue: 1
      Block: 
        Assignment: 
          Variable: j
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
        Loop: 
          Binary: 
            Operator: <
            Variable: j
            Variable: n
          Block: 
            Conditional: 
              Binary: 
                Operator: <
                ArrayRef: orig[i]
                ArrayRef: orig[j]
              Block: 
                Assignment: 
                  ArrayRef: count[j]
                  Binary: 
                    Operator: +
                    ArrayRef: count[j]
                    IntValue: 1
              Block: 
                Assignment: 
                  ArrayRef: count[i]
                  Binary: 
                    Operator: +
                    ArrayRef: count[i]
                    IntValue: 1
            Assignment: 
              Variable: j
              Binary: 
                Operator: +
                Variable: j
                IntValue: 1
        Assignment: 
          Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          ArrayRef: sorted[count[i]]
          ArrayRef: orig[i]
        Assignment: 
          Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1

Begin type checking...

Type map:
{ <sorted[5], char>, <orig[5], char>, <count[5], int>, <i, int>, <j, int>, <n, int> }

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Declarations: 
    Declarations = {<orig[5], char>, <sorted[5], char>, <count[5], int>, <n, int>, <i, int>, <j, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 5
    Assignment: 
      ArrayRef: orig[0]
      CharValue: 2
    Assignment: 
      ArrayRef: orig[1]
      CharValue: 9
    Assignment: 
      ArrayRef: orig[2]
      CharValue: 5
    Assignment: 
      ArrayRef: orig[3]
      CharValue: 0
    Assignment: 
      ArrayRef: orig[4]
      CharValue: 6
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          ArrayRef: count[i]
          IntValue: 0
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Binary: 
          Operator: INT-
          Variable: n
          IntValue: 1
      Block: 
        Assignment: 
          Variable: j
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
        Loop: 
          Binary: 
            Operator: INT<
            Variable: j
            Variable: n
          Block: 
            Conditional: 
              Binary: 
                Operator: CHAR<
                ArrayRef: orig[i]
                ArrayRef: orig[j]
              Block: 
                Assignment: 
                  ArrayRef: count[j]
                  Binary: 
                    Operator: INT+
                    ArrayRef: count[j]
                    IntValue: 1
              Block: 
                Assignment: 
                  ArrayRef: count[i]
                  Binary: 
                    Operator: INT+
                    ArrayRef: count[i]
                    IntValue: 1
            Assignment: 
              Variable: j
              Binary: 
                Operator: INT+
                Variable: j
                IntValue: 1
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
    Assignment: 
      Variable: i
      IntValue: 0
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          ArrayRef: sorted[count[i]]
          ArrayRef: orig[i]
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1

Begin interpreting... programs/sortchar.cpp

Final State

Environment:

    VariableRef  MemoryAddr  MemoryValue(from Memory)
    sorted[5]    9           DopeVector{addr[0]=517, size=5, type=char}
    orig[5]      0           DopeVector{addr[0]=512, size=5, type=char}
    count[5]     18          DopeVector{addr[0]=522, size=20, type=int}
    i            34          5
    j            38          5
    n            30          5

Memory:

  Static area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue

  Runtime Stack area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    0           orig[5]           char     DopeVector{addr[0]=512, size=5, type=char}
    9           sorted[5]         char     DopeVector{addr[0]=517, size=5, type=char}
    18          count[5]          int      DopeVector{addr[0]=522, size=20, type=int}
    30          n                 int      5
    34          i                 int      5
    38          j                 int      5

  Heap area:
    MemoryAddr  VarRef(from Env)  Type     MemoryValue
    512         orig[0]           char     2
    513         orig[1]           char     9
    514         orig[2]           char     5
    515         orig[3]           char     0
    516         orig[4]           char     6
    517         sorted[0]         char     0
    518         sorted[1]         char     2
    519         sorted[2]         char     5
    520         sorted[3]         char     6
    521         sorted[4]         char     9
    522         count[0]          int      1
    526         count[4]          int      4
    530         count[8]          int      2
    534         count[12]         int      0
    538         count[16]         int      3
